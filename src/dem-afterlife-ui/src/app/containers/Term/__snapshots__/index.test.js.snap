// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Term component match expected snapshot for not term and untermedPostfix 1`] = `
<Connect(Term)
  doNotTerm={true}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  untermedPostfix=":"
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={true}
    indentAfter={false}
    indentBefore={false}
    locale="ru"
    spaceAfter={false}
    spaceBefore={false}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={null}
    untermedPostfix=":"
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "",
          "paddingRight": "",
        }
      }
    >
      :
    </span>
  </Term>
</Connect(Term)>
`;

exports[`Term component match expected snapshot for simple term 1`] = `
<Connect(Term)
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  term={
    Object {
      "id": 1,
      "value": "Тем",
    }
  }
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={false}
    indentAfter={false}
    indentBefore={false}
    locale="ru"
    spaceAfter={false}
    spaceBefore={false}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={
      Object {
        "id": 1,
        "value": "Тем",
      }
    }
    untermedPostfix=""
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "",
          "paddingRight": "",
        }
      }
    >
      Тем
    </span>
  </Term>
</Connect(Term)>
`;

exports[`Term component match expected snapshot for simple term and untermedPostfix 1`] = `
<Connect(Term)
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  term={
    Object {
      "id": 1,
      "value": "Тем",
    }
  }
  untermedPostfix=":"
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={false}
    indentAfter={false}
    indentBefore={false}
    locale="ru"
    spaceAfter={false}
    spaceBefore={false}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={
      Object {
        "id": 1,
        "value": "Тем",
      }
    }
    untermedPostfix=":"
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "",
          "paddingRight": "",
        }
      }
    >
      Тем:
    </span>
  </Term>
</Connect(Term)>
`;

exports[`Term component match expected snapshot for simple term with indent after 1`] = `
<Connect(Term)
  indentAfter={true}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  term={
    Object {
      "id": 1,
      "value": "Тем",
    }
  }
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={false}
    indentAfter={true}
    indentBefore={false}
    locale="ru"
    spaceAfter={false}
    spaceBefore={false}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={
      Object {
        "id": 1,
        "value": "Тем",
      }
    }
    untermedPostfix=""
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "",
          "paddingRight": "0.25rem",
        }
      }
    >
      Тем
    </span>
  </Term>
</Connect(Term)>
`;

exports[`Term component match expected snapshot for simple term with indent before and after 1`] = `
<Connect(Term)
  indentAfter={true}
  indentBefore={true}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  term={
    Object {
      "id": 1,
      "value": "Тем",
    }
  }
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={false}
    indentAfter={true}
    indentBefore={true}
    locale="ru"
    spaceAfter={false}
    spaceBefore={false}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={
      Object {
        "id": 1,
        "value": "Тем",
      }
    }
    untermedPostfix=""
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "0.25rem",
          "paddingRight": "0.25rem",
        }
      }
    >
      Тем
    </span>
  </Term>
</Connect(Term)>
`;

exports[`Term component match expected snapshot for simple term with space after 1`] = `
<Connect(Term)
  spaceAfter={true}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  term={
    Object {
      "id": 1,
      "value": "Тем",
    }
  }
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={false}
    indentAfter={false}
    indentBefore={false}
    locale="ru"
    spaceAfter={true}
    spaceBefore={false}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={
      Object {
        "id": 1,
        "value": "Тем",
      }
    }
    untermedPostfix=""
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "",
          "paddingRight": "",
        }
      }
    >
      Тем 
    </span>
  </Term>
</Connect(Term)>
`;

exports[`Term component match expected snapshot for simple term with space before and after 1`] = `
<Connect(Term)
  spaceAfter={true}
  spaceBefore={true}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  term={
    Object {
      "id": 1,
      "value": "Тем",
    }
  }
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={false}
    indentAfter={false}
    indentBefore={false}
    locale="ru"
    spaceAfter={true}
    spaceBefore={true}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={
      Object {
        "id": 1,
        "value": "Тем",
      }
    }
    untermedPostfix=""
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "",
          "paddingRight": "",
        }
      }
    >
       Тем 
    </span>
  </Term>
</Connect(Term)>
`;

exports[`Term component match expected snapshot for term with indent before 1`] = `
<Connect(Term)
  indentBefore={true}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  term={
    Object {
      "id": 1,
      "value": "Тем",
    }
  }
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={false}
    indentAfter={false}
    indentBefore={true}
    locale="ru"
    spaceAfter={false}
    spaceBefore={false}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={
      Object {
        "id": 1,
        "value": "Тем",
      }
    }
    untermedPostfix=""
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "0.25rem",
          "paddingRight": "",
        }
      }
    >
      Тем
    </span>
  </Term>
</Connect(Term)>
`;

exports[`Term component match expected snapshot for term with space before 1`] = `
<Connect(Term)
  spaceBefore={true}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  term={
    Object {
      "id": 1,
      "value": "Тем",
    }
  }
>
  <Term
    className=""
    dispatch={[Function]}
    doNotTerm={false}
    indentAfter={false}
    indentBefore={false}
    locale="ru"
    spaceAfter={false}
    spaceBefore={true}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    term={
      Object {
        "id": 1,
        "value": "Тем",
      }
    }
    untermedPostfix=""
  >
    <span
      className=""
      style={
        Object {
          "paddingLeft": "",
          "paddingRight": "",
        }
      }
    >
       Тем
    </span>
  </Term>
</Connect(Term)>
`;
